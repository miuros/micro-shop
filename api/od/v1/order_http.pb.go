// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type OdSrvHTTPServer interface {
	CreateCate(context.Context, *CreateCateReq) (*CreateCateReply, error)
	CreateOd(context.Context, *CreateOrderReq) (*CreateOrderReply, error)
	CreateStock(context.Context, *CreateStockReq) (*CreateStockReply, error)
	DeleteOd(context.Context, *DeleteOrderReq) (*DeleteOrderReply, error)
	DeleteStock(context.Context, *DeleteStockReq) (*DeleteStockReply, error)
	GetOd(context.Context, *GetOrderReq) (*GetOrderReply, error)
	GetStock(context.Context, *GetStockReq) (*GetStockReply, error)
	ListOd(context.Context, *ListOrderReq) (*ListOrderReply, error)
	ListOdByCateId(context.Context, *ListOrderByCateIdReq) (*ListOrderByCateIdReply, error)
	ListOdForShopper(context.Context, *ListOdForSReq) (*ListOdForSpReply, error)
	PayOd(context.Context, *PayOdReq) (*PayOdReply, error)
	UpdateOd(context.Context, *UpdateOrderReq) (*UpdateOrderReply, error)
	UpdateStock(context.Context, *UpdateStockReq) (*UpdateStockReply, error)
}

func RegisterOdSrvHTTPServer(s *http.Server, srv OdSrvHTTPServer) {
	r := s.Route("/")
	r.POST("/api/order/create", _OdSrv_CreateOd0_HTTP_Handler(srv))
	r.PUT("/api/order/update", _OdSrv_UpdateOd0_HTTP_Handler(srv))
	r.DELETE("/api/order/delete/{id}/{userUuid}", _OdSrv_DeleteOd0_HTTP_Handler(srv))
	r.GET("/api/order/get/{id}/{userUuid}", _OdSrv_GetOd0_HTTP_Handler(srv))
	r.GET("/api/order/list/{userUuid}/{page}/{limit}", _OdSrv_ListOd0_HTTP_Handler(srv))
	r.GET("/api/order/list/by/cate/{userUuid}/{cateId}", _OdSrv_ListOdByCateId0_HTTP_Handler(srv))
	r.GET("/api/od/v1/listforshop/{shopId}/{status}/{limit}/{page}", _OdSrv_ListOdForShopper0_HTTP_Handler(srv))
	r.POST("/api/od/v1/pay", _OdSrv_PayOd0_HTTP_Handler(srv))
	r.POST("/api/stock/create", _OdSrv_CreateStock0_HTTP_Handler(srv))
	r.PUT("/api/stock/update", _OdSrv_UpdateStock0_HTTP_Handler(srv))
	r.DELETE("/api/stock/delete/{productId}/{userUuid}", _OdSrv_DeleteStock0_HTTP_Handler(srv))
	r.GET("/api/stock/get/{productId}", _OdSrv_GetStock0_HTTP_Handler(srv))
	r.POST("/api/cate/create", _OdSrv_CreateCate0_HTTP_Handler(srv))
}

func _OdSrv_CreateOd0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/CreateOd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOd(ctx, req.(*CreateOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_UpdateOd0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrderReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/UpdateOd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOd(ctx, req.(*UpdateOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_DeleteOd0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/DeleteOd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOd(ctx, req.(*DeleteOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_GetOd0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/GetOd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOd(ctx, req.(*GetOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_ListOd0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/ListOd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOd(ctx, req.(*ListOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_ListOdByCateId0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrderByCateIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/ListOdByCateId")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOdByCateId(ctx, req.(*ListOrderByCateIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrderByCateIdReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_ListOdForShopper0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOdForSReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/ListOdForShopper")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOdForShopper(ctx, req.(*ListOdForSReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOdForSpReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_PayOd0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/PayOd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PayOd(ctx, req.(*PayOdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOdReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_CreateStock0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStockReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/CreateStock")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStock(ctx, req.(*CreateStockReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStockReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_UpdateStock0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStockReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/UpdateStock")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStock(ctx, req.(*UpdateStockReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStockReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_DeleteStock0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStockReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/DeleteStock")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStock(ctx, req.(*DeleteStockReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStockReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_GetStock0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStockReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/GetStock")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStock(ctx, req.(*GetStockReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStockReply)
		return ctx.Result(200, reply)
	}
}

func _OdSrv_CreateCate0_HTTP_Handler(srv OdSrvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.OdSrv/CreateCate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCate(ctx, req.(*CreateCateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCateReply)
		return ctx.Result(200, reply)
	}
}

type OdSrvHTTPClient interface {
	CreateCate(ctx context.Context, req *CreateCateReq, opts ...http.CallOption) (rsp *CreateCateReply, err error)
	CreateOd(ctx context.Context, req *CreateOrderReq, opts ...http.CallOption) (rsp *CreateOrderReply, err error)
	CreateStock(ctx context.Context, req *CreateStockReq, opts ...http.CallOption) (rsp *CreateStockReply, err error)
	DeleteOd(ctx context.Context, req *DeleteOrderReq, opts ...http.CallOption) (rsp *DeleteOrderReply, err error)
	DeleteStock(ctx context.Context, req *DeleteStockReq, opts ...http.CallOption) (rsp *DeleteStockReply, err error)
	GetOd(ctx context.Context, req *GetOrderReq, opts ...http.CallOption) (rsp *GetOrderReply, err error)
	GetStock(ctx context.Context, req *GetStockReq, opts ...http.CallOption) (rsp *GetStockReply, err error)
	ListOd(ctx context.Context, req *ListOrderReq, opts ...http.CallOption) (rsp *ListOrderReply, err error)
	ListOdByCateId(ctx context.Context, req *ListOrderByCateIdReq, opts ...http.CallOption) (rsp *ListOrderByCateIdReply, err error)
	ListOdForShopper(ctx context.Context, req *ListOdForSReq, opts ...http.CallOption) (rsp *ListOdForSpReply, err error)
	PayOd(ctx context.Context, req *PayOdReq, opts ...http.CallOption) (rsp *PayOdReply, err error)
	UpdateOd(ctx context.Context, req *UpdateOrderReq, opts ...http.CallOption) (rsp *UpdateOrderReply, err error)
	UpdateStock(ctx context.Context, req *UpdateStockReq, opts ...http.CallOption) (rsp *UpdateStockReply, err error)
}

type OdSrvHTTPClientImpl struct {
	cc *http.Client
}

func NewOdSrvHTTPClient(client *http.Client) OdSrvHTTPClient {
	return &OdSrvHTTPClientImpl{client}
}

func (c *OdSrvHTTPClientImpl) CreateCate(ctx context.Context, in *CreateCateReq, opts ...http.CallOption) (*CreateCateReply, error) {
	var out CreateCateReply
	pattern := "/api/cate/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.OdSrv/CreateCate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) CreateOd(ctx context.Context, in *CreateOrderReq, opts ...http.CallOption) (*CreateOrderReply, error) {
	var out CreateOrderReply
	pattern := "/api/order/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.OdSrv/CreateOd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) CreateStock(ctx context.Context, in *CreateStockReq, opts ...http.CallOption) (*CreateStockReply, error) {
	var out CreateStockReply
	pattern := "/api/stock/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.OdSrv/CreateStock"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) DeleteOd(ctx context.Context, in *DeleteOrderReq, opts ...http.CallOption) (*DeleteOrderReply, error) {
	var out DeleteOrderReply
	pattern := "/api/order/delete/{id}/{userUuid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.OdSrv/DeleteOd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) DeleteStock(ctx context.Context, in *DeleteStockReq, opts ...http.CallOption) (*DeleteStockReply, error) {
	var out DeleteStockReply
	pattern := "/api/stock/delete/{productId}/{userUuid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.OdSrv/DeleteStock"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) GetOd(ctx context.Context, in *GetOrderReq, opts ...http.CallOption) (*GetOrderReply, error) {
	var out GetOrderReply
	pattern := "/api/order/get/{id}/{userUuid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.OdSrv/GetOd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) GetStock(ctx context.Context, in *GetStockReq, opts ...http.CallOption) (*GetStockReply, error) {
	var out GetStockReply
	pattern := "/api/stock/get/{productId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.OdSrv/GetStock"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) ListOd(ctx context.Context, in *ListOrderReq, opts ...http.CallOption) (*ListOrderReply, error) {
	var out ListOrderReply
	pattern := "/api/order/list/{userUuid}/{page}/{limit}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.OdSrv/ListOd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) ListOdByCateId(ctx context.Context, in *ListOrderByCateIdReq, opts ...http.CallOption) (*ListOrderByCateIdReply, error) {
	var out ListOrderByCateIdReply
	pattern := "/api/order/list/by/cate/{userUuid}/{cateId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.OdSrv/ListOdByCateId"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) ListOdForShopper(ctx context.Context, in *ListOdForSReq, opts ...http.CallOption) (*ListOdForSpReply, error) {
	var out ListOdForSpReply
	pattern := "/api/od/v1/listforshop/{shopId}/{status}/{limit}/{page}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.OdSrv/ListOdForShopper"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) PayOd(ctx context.Context, in *PayOdReq, opts ...http.CallOption) (*PayOdReply, error) {
	var out PayOdReply
	pattern := "/api/od/v1/pay"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.OdSrv/PayOd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) UpdateOd(ctx context.Context, in *UpdateOrderReq, opts ...http.CallOption) (*UpdateOrderReply, error) {
	var out UpdateOrderReply
	pattern := "/api/order/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.OdSrv/UpdateOd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OdSrvHTTPClientImpl) UpdateStock(ctx context.Context, in *UpdateStockReq, opts ...http.CallOption) (*UpdateStockReply, error) {
	var out UpdateStockReply
	pattern := "/api/stock/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.OdSrv/UpdateStock"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
