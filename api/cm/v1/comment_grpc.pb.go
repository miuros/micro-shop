// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/comment/v1/comment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmServiceClient is the client API for CmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmServiceClient interface {
	CreateCm(ctx context.Context, in *CreateCmReq, opts ...grpc.CallOption) (*CreateCmReply, error)
	UpdateCm(ctx context.Context, in *UpdateCmReq, opts ...grpc.CallOption) (*UpdateCmReply, error)
	DeleteCm(ctx context.Context, in *DeleteCmReq, opts ...grpc.CallOption) (*DeleteCmReply, error)
	GetCm(ctx context.Context, in *GetCmReq, opts ...grpc.CallOption) (*GetCmReply, error)
	ListCm(ctx context.Context, in *ListCmReq, opts ...grpc.CallOption) (*ListCmReply, error)
}

type cmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmServiceClient(cc grpc.ClientConnInterface) CmServiceClient {
	return &cmServiceClient{cc}
}

func (c *cmServiceClient) CreateCm(ctx context.Context, in *CreateCmReq, opts ...grpc.CallOption) (*CreateCmReply, error) {
	out := new(CreateCmReply)
	err := c.cc.Invoke(ctx, "/v1.CmService/CreateCm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmServiceClient) UpdateCm(ctx context.Context, in *UpdateCmReq, opts ...grpc.CallOption) (*UpdateCmReply, error) {
	out := new(UpdateCmReply)
	err := c.cc.Invoke(ctx, "/v1.CmService/UpdateCm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmServiceClient) DeleteCm(ctx context.Context, in *DeleteCmReq, opts ...grpc.CallOption) (*DeleteCmReply, error) {
	out := new(DeleteCmReply)
	err := c.cc.Invoke(ctx, "/v1.CmService/DeleteCm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmServiceClient) GetCm(ctx context.Context, in *GetCmReq, opts ...grpc.CallOption) (*GetCmReply, error) {
	out := new(GetCmReply)
	err := c.cc.Invoke(ctx, "/v1.CmService/GetCm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmServiceClient) ListCm(ctx context.Context, in *ListCmReq, opts ...grpc.CallOption) (*ListCmReply, error) {
	out := new(ListCmReply)
	err := c.cc.Invoke(ctx, "/v1.CmService/ListCm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmServiceServer is the server API for CmService service.
// All implementations must embed UnimplementedCmServiceServer
// for forward compatibility
type CmServiceServer interface {
	CreateCm(context.Context, *CreateCmReq) (*CreateCmReply, error)
	UpdateCm(context.Context, *UpdateCmReq) (*UpdateCmReply, error)
	DeleteCm(context.Context, *DeleteCmReq) (*DeleteCmReply, error)
	GetCm(context.Context, *GetCmReq) (*GetCmReply, error)
	ListCm(context.Context, *ListCmReq) (*ListCmReply, error)
	mustEmbedUnimplementedCmServiceServer()
}

// UnimplementedCmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCmServiceServer struct {
}

func (UnimplementedCmServiceServer) CreateCm(context.Context, *CreateCmReq) (*CreateCmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCm not implemented")
}
func (UnimplementedCmServiceServer) UpdateCm(context.Context, *UpdateCmReq) (*UpdateCmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCm not implemented")
}
func (UnimplementedCmServiceServer) DeleteCm(context.Context, *DeleteCmReq) (*DeleteCmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCm not implemented")
}
func (UnimplementedCmServiceServer) GetCm(context.Context, *GetCmReq) (*GetCmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCm not implemented")
}
func (UnimplementedCmServiceServer) ListCm(context.Context, *ListCmReq) (*ListCmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCm not implemented")
}
func (UnimplementedCmServiceServer) mustEmbedUnimplementedCmServiceServer() {}

// UnsafeCmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmServiceServer will
// result in compilation errors.
type UnsafeCmServiceServer interface {
	mustEmbedUnimplementedCmServiceServer()
}

func RegisterCmServiceServer(s grpc.ServiceRegistrar, srv CmServiceServer) {
	s.RegisterService(&CmService_ServiceDesc, srv)
}

func _CmService_CreateCm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmServiceServer).CreateCm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmService/CreateCm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmServiceServer).CreateCm(ctx, req.(*CreateCmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmService_UpdateCm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmServiceServer).UpdateCm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmService/UpdateCm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmServiceServer).UpdateCm(ctx, req.(*UpdateCmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmService_DeleteCm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmServiceServer).DeleteCm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmService/DeleteCm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmServiceServer).DeleteCm(ctx, req.(*DeleteCmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmService_GetCm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmServiceServer).GetCm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmService/GetCm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmServiceServer).GetCm(ctx, req.(*GetCmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmService_ListCm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmServiceServer).ListCm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmService/ListCm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmServiceServer).ListCm(ctx, req.(*ListCmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CmService_ServiceDesc is the grpc.ServiceDesc for CmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CmService",
	HandlerType: (*CmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCm",
			Handler:    _CmService_CreateCm_Handler,
		},
		{
			MethodName: "UpdateCm",
			Handler:    _CmService_UpdateCm_Handler,
		},
		{
			MethodName: "DeleteCm",
			Handler:    _CmService_DeleteCm_Handler,
		},
		{
			MethodName: "GetCm",
			Handler:    _CmService_GetCm_Handler,
		},
		{
			MethodName: "ListCm",
			Handler:    _CmService_ListCm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/comment/v1/comment.proto",
}
