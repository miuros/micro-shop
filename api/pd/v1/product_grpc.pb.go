// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/product.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PdServiceClient is the client API for PdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdServiceClient interface {
	CreatePd(ctx context.Context, in *CreatePdReq, opts ...grpc.CallOption) (*CreatePdReply, error)
	UpdatePd(ctx context.Context, in *UpdatePdReq, opts ...grpc.CallOption) (*UpdatePdReply, error)
	DeletePd(ctx context.Context, in *DeletePdReq, opts ...grpc.CallOption) (*DeletePdReply, error)
	GetPd(ctx context.Context, in *GetPdReq, opts ...grpc.CallOption) (*GetPdReply, error)
	ListPd(ctx context.Context, in *ListPdReq, opts ...grpc.CallOption) (*ListPdReply, error)
	ListForSp(ctx context.Context, in *ListForSpReq, opts ...grpc.CallOption) (*ListForSpReply, error)
	FindPdByName(ctx context.Context, in *ListPdReq, opts ...grpc.CallOption) (*ListPdReply, error)
	ListPdByCi(ctx context.Context, in *ListPdByCiReq, opts ...grpc.CallOption) (*ListPdByCiReply, error)
	CreateBn(ctx context.Context, in *CreateBnReq, opts ...grpc.CallOption) (*CreateBnReply, error)
	UpdateBn(ctx context.Context, in *UpdateBnReq, opts ...grpc.CallOption) (*UpdateBnReply, error)
	DeleteBn(ctx context.Context, in *DeleteBnReq, opts ...grpc.CallOption) (*DeleteBnReply, error)
	GetBn(ctx context.Context, in *GetBnReq, opts ...grpc.CallOption) (*GetBnReply, error)
	ListBn(ctx context.Context, in *ListBnReq, opts ...grpc.CallOption) (*ListBnReply, error)
	CreateCart(ctx context.Context, in *CreateCartReq, opts ...grpc.CallOption) (*CreateCartReply, error)
	UpdateCart(ctx context.Context, in *UpdateCartReq, opts ...grpc.CallOption) (*UpdateCartReply, error)
	DeleteCart(ctx context.Context, in *DeleteCartReq, opts ...grpc.CallOption) (*DeleteCartReply, error)
	GetCart(ctx context.Context, in *GetCartReq, opts ...grpc.CallOption) (*GetCartReply, error)
	ListCart(ctx context.Context, in *ListCartReq, opts ...grpc.CallOption) (*ListCartReply, error)
	CreateShop(ctx context.Context, in *CreateShopReq, opts ...grpc.CallOption) (*CreateShopReply, error)
	UpdateShop(ctx context.Context, in *UpdateShopReq, opts ...grpc.CallOption) (*UpdateShopReply, error)
	DeleteShop(ctx context.Context, in *DeleteShopReq, opts ...grpc.CallOption) (*DeleteShopReply, error)
	GetShop(ctx context.Context, in *GetShopReq, opts ...grpc.CallOption) (*GetShopReply, error)
	GetSpByUuid(ctx context.Context, in *GetSpByUuidReq, opts ...grpc.CallOption) (*GetSpByUuidReply, error)
	ListShop(ctx context.Context, in *ListShopReq, opts ...grpc.CallOption) (*ListShopReply, error)
	CreateCg(ctx context.Context, in *CreateCgReq, opts ...grpc.CallOption) (*CreateCgReply, error)
	UpdateCg(ctx context.Context, in *UpdateCgReq, opts ...grpc.CallOption) (*UpdateCgReply, error)
	DeleteCg(ctx context.Context, in *DeleteCgReq, opts ...grpc.CallOption) (*DeleteCgReply, error)
	GetCg(ctx context.Context, in *GetCgReq, opts ...grpc.CallOption) (*GetCgReply, error)
	ListCg(ctx context.Context, in *ListCgReq, opts ...grpc.CallOption) (*ListCgReply, error)
}

type pdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPdServiceClient(cc grpc.ClientConnInterface) PdServiceClient {
	return &pdServiceClient{cc}
}

func (c *pdServiceClient) CreatePd(ctx context.Context, in *CreatePdReq, opts ...grpc.CallOption) (*CreatePdReply, error) {
	out := new(CreatePdReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/CreatePd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) UpdatePd(ctx context.Context, in *UpdatePdReq, opts ...grpc.CallOption) (*UpdatePdReply, error) {
	out := new(UpdatePdReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/UpdatePd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) DeletePd(ctx context.Context, in *DeletePdReq, opts ...grpc.CallOption) (*DeletePdReply, error) {
	out := new(DeletePdReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/DeletePd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) GetPd(ctx context.Context, in *GetPdReq, opts ...grpc.CallOption) (*GetPdReply, error) {
	out := new(GetPdReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/GetPd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) ListPd(ctx context.Context, in *ListPdReq, opts ...grpc.CallOption) (*ListPdReply, error) {
	out := new(ListPdReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/ListPd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) ListForSp(ctx context.Context, in *ListForSpReq, opts ...grpc.CallOption) (*ListForSpReply, error) {
	out := new(ListForSpReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/ListForSp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) FindPdByName(ctx context.Context, in *ListPdReq, opts ...grpc.CallOption) (*ListPdReply, error) {
	out := new(ListPdReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/FindPdByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) ListPdByCi(ctx context.Context, in *ListPdByCiReq, opts ...grpc.CallOption) (*ListPdByCiReply, error) {
	out := new(ListPdByCiReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/ListPdByCi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) CreateBn(ctx context.Context, in *CreateBnReq, opts ...grpc.CallOption) (*CreateBnReply, error) {
	out := new(CreateBnReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/CreateBn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) UpdateBn(ctx context.Context, in *UpdateBnReq, opts ...grpc.CallOption) (*UpdateBnReply, error) {
	out := new(UpdateBnReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/UpdateBn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) DeleteBn(ctx context.Context, in *DeleteBnReq, opts ...grpc.CallOption) (*DeleteBnReply, error) {
	out := new(DeleteBnReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/DeleteBn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) GetBn(ctx context.Context, in *GetBnReq, opts ...grpc.CallOption) (*GetBnReply, error) {
	out := new(GetBnReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/GetBn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) ListBn(ctx context.Context, in *ListBnReq, opts ...grpc.CallOption) (*ListBnReply, error) {
	out := new(ListBnReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/ListBn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) CreateCart(ctx context.Context, in *CreateCartReq, opts ...grpc.CallOption) (*CreateCartReply, error) {
	out := new(CreateCartReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/CreateCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) UpdateCart(ctx context.Context, in *UpdateCartReq, opts ...grpc.CallOption) (*UpdateCartReply, error) {
	out := new(UpdateCartReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/UpdateCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) DeleteCart(ctx context.Context, in *DeleteCartReq, opts ...grpc.CallOption) (*DeleteCartReply, error) {
	out := new(DeleteCartReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/DeleteCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) GetCart(ctx context.Context, in *GetCartReq, opts ...grpc.CallOption) (*GetCartReply, error) {
	out := new(GetCartReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/GetCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) ListCart(ctx context.Context, in *ListCartReq, opts ...grpc.CallOption) (*ListCartReply, error) {
	out := new(ListCartReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/ListCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) CreateShop(ctx context.Context, in *CreateShopReq, opts ...grpc.CallOption) (*CreateShopReply, error) {
	out := new(CreateShopReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/CreateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) UpdateShop(ctx context.Context, in *UpdateShopReq, opts ...grpc.CallOption) (*UpdateShopReply, error) {
	out := new(UpdateShopReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/UpdateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) DeleteShop(ctx context.Context, in *DeleteShopReq, opts ...grpc.CallOption) (*DeleteShopReply, error) {
	out := new(DeleteShopReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/DeleteShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) GetShop(ctx context.Context, in *GetShopReq, opts ...grpc.CallOption) (*GetShopReply, error) {
	out := new(GetShopReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/GetShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) GetSpByUuid(ctx context.Context, in *GetSpByUuidReq, opts ...grpc.CallOption) (*GetSpByUuidReply, error) {
	out := new(GetSpByUuidReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/GetSpByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) ListShop(ctx context.Context, in *ListShopReq, opts ...grpc.CallOption) (*ListShopReply, error) {
	out := new(ListShopReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/ListShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) CreateCg(ctx context.Context, in *CreateCgReq, opts ...grpc.CallOption) (*CreateCgReply, error) {
	out := new(CreateCgReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/CreateCg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) UpdateCg(ctx context.Context, in *UpdateCgReq, opts ...grpc.CallOption) (*UpdateCgReply, error) {
	out := new(UpdateCgReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/UpdateCg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) DeleteCg(ctx context.Context, in *DeleteCgReq, opts ...grpc.CallOption) (*DeleteCgReply, error) {
	out := new(DeleteCgReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/DeleteCg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) GetCg(ctx context.Context, in *GetCgReq, opts ...grpc.CallOption) (*GetCgReply, error) {
	out := new(GetCgReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/GetCg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdServiceClient) ListCg(ctx context.Context, in *ListCgReq, opts ...grpc.CallOption) (*ListCgReply, error) {
	out := new(ListCgReply)
	err := c.cc.Invoke(ctx, "/v1.PdService/ListCg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdServiceServer is the server API for PdService service.
// All implementations must embed UnimplementedPdServiceServer
// for forward compatibility
type PdServiceServer interface {
	CreatePd(context.Context, *CreatePdReq) (*CreatePdReply, error)
	UpdatePd(context.Context, *UpdatePdReq) (*UpdatePdReply, error)
	DeletePd(context.Context, *DeletePdReq) (*DeletePdReply, error)
	GetPd(context.Context, *GetPdReq) (*GetPdReply, error)
	ListPd(context.Context, *ListPdReq) (*ListPdReply, error)
	ListForSp(context.Context, *ListForSpReq) (*ListForSpReply, error)
	FindPdByName(context.Context, *ListPdReq) (*ListPdReply, error)
	ListPdByCi(context.Context, *ListPdByCiReq) (*ListPdByCiReply, error)
	CreateBn(context.Context, *CreateBnReq) (*CreateBnReply, error)
	UpdateBn(context.Context, *UpdateBnReq) (*UpdateBnReply, error)
	DeleteBn(context.Context, *DeleteBnReq) (*DeleteBnReply, error)
	GetBn(context.Context, *GetBnReq) (*GetBnReply, error)
	ListBn(context.Context, *ListBnReq) (*ListBnReply, error)
	CreateCart(context.Context, *CreateCartReq) (*CreateCartReply, error)
	UpdateCart(context.Context, *UpdateCartReq) (*UpdateCartReply, error)
	DeleteCart(context.Context, *DeleteCartReq) (*DeleteCartReply, error)
	GetCart(context.Context, *GetCartReq) (*GetCartReply, error)
	ListCart(context.Context, *ListCartReq) (*ListCartReply, error)
	CreateShop(context.Context, *CreateShopReq) (*CreateShopReply, error)
	UpdateShop(context.Context, *UpdateShopReq) (*UpdateShopReply, error)
	DeleteShop(context.Context, *DeleteShopReq) (*DeleteShopReply, error)
	GetShop(context.Context, *GetShopReq) (*GetShopReply, error)
	GetSpByUuid(context.Context, *GetSpByUuidReq) (*GetSpByUuidReply, error)
	ListShop(context.Context, *ListShopReq) (*ListShopReply, error)
	CreateCg(context.Context, *CreateCgReq) (*CreateCgReply, error)
	UpdateCg(context.Context, *UpdateCgReq) (*UpdateCgReply, error)
	DeleteCg(context.Context, *DeleteCgReq) (*DeleteCgReply, error)
	GetCg(context.Context, *GetCgReq) (*GetCgReply, error)
	ListCg(context.Context, *ListCgReq) (*ListCgReply, error)
	mustEmbedUnimplementedPdServiceServer()
}

// UnimplementedPdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPdServiceServer struct {
}

func (UnimplementedPdServiceServer) CreatePd(context.Context, *CreatePdReq) (*CreatePdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePd not implemented")
}
func (UnimplementedPdServiceServer) UpdatePd(context.Context, *UpdatePdReq) (*UpdatePdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePd not implemented")
}
func (UnimplementedPdServiceServer) DeletePd(context.Context, *DeletePdReq) (*DeletePdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePd not implemented")
}
func (UnimplementedPdServiceServer) GetPd(context.Context, *GetPdReq) (*GetPdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPd not implemented")
}
func (UnimplementedPdServiceServer) ListPd(context.Context, *ListPdReq) (*ListPdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPd not implemented")
}
func (UnimplementedPdServiceServer) ListForSp(context.Context, *ListForSpReq) (*ListForSpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForSp not implemented")
}
func (UnimplementedPdServiceServer) FindPdByName(context.Context, *ListPdReq) (*ListPdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPdByName not implemented")
}
func (UnimplementedPdServiceServer) ListPdByCi(context.Context, *ListPdByCiReq) (*ListPdByCiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPdByCi not implemented")
}
func (UnimplementedPdServiceServer) CreateBn(context.Context, *CreateBnReq) (*CreateBnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBn not implemented")
}
func (UnimplementedPdServiceServer) UpdateBn(context.Context, *UpdateBnReq) (*UpdateBnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBn not implemented")
}
func (UnimplementedPdServiceServer) DeleteBn(context.Context, *DeleteBnReq) (*DeleteBnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBn not implemented")
}
func (UnimplementedPdServiceServer) GetBn(context.Context, *GetBnReq) (*GetBnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBn not implemented")
}
func (UnimplementedPdServiceServer) ListBn(context.Context, *ListBnReq) (*ListBnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBn not implemented")
}
func (UnimplementedPdServiceServer) CreateCart(context.Context, *CreateCartReq) (*CreateCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedPdServiceServer) UpdateCart(context.Context, *UpdateCartReq) (*UpdateCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCart not implemented")
}
func (UnimplementedPdServiceServer) DeleteCart(context.Context, *DeleteCartReq) (*DeleteCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCart not implemented")
}
func (UnimplementedPdServiceServer) GetCart(context.Context, *GetCartReq) (*GetCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedPdServiceServer) ListCart(context.Context, *ListCartReq) (*ListCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCart not implemented")
}
func (UnimplementedPdServiceServer) CreateShop(context.Context, *CreateShopReq) (*CreateShopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShop not implemented")
}
func (UnimplementedPdServiceServer) UpdateShop(context.Context, *UpdateShopReq) (*UpdateShopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShop not implemented")
}
func (UnimplementedPdServiceServer) DeleteShop(context.Context, *DeleteShopReq) (*DeleteShopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedPdServiceServer) GetShop(context.Context, *GetShopReq) (*GetShopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShop not implemented")
}
func (UnimplementedPdServiceServer) GetSpByUuid(context.Context, *GetSpByUuidReq) (*GetSpByUuidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpByUuid not implemented")
}
func (UnimplementedPdServiceServer) ListShop(context.Context, *ListShopReq) (*ListShopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShop not implemented")
}
func (UnimplementedPdServiceServer) CreateCg(context.Context, *CreateCgReq) (*CreateCgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCg not implemented")
}
func (UnimplementedPdServiceServer) UpdateCg(context.Context, *UpdateCgReq) (*UpdateCgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCg not implemented")
}
func (UnimplementedPdServiceServer) DeleteCg(context.Context, *DeleteCgReq) (*DeleteCgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCg not implemented")
}
func (UnimplementedPdServiceServer) GetCg(context.Context, *GetCgReq) (*GetCgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCg not implemented")
}
func (UnimplementedPdServiceServer) ListCg(context.Context, *ListCgReq) (*ListCgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCg not implemented")
}
func (UnimplementedPdServiceServer) mustEmbedUnimplementedPdServiceServer() {}

// UnsafePdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdServiceServer will
// result in compilation errors.
type UnsafePdServiceServer interface {
	mustEmbedUnimplementedPdServiceServer()
}

func RegisterPdServiceServer(s grpc.ServiceRegistrar, srv PdServiceServer) {
	s.RegisterService(&PdService_ServiceDesc, srv)
}

func _PdService_CreatePd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).CreatePd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/CreatePd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).CreatePd(ctx, req.(*CreatePdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_UpdatePd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).UpdatePd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/UpdatePd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).UpdatePd(ctx, req.(*UpdatePdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_DeletePd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).DeletePd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/DeletePd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).DeletePd(ctx, req.(*DeletePdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_GetPd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).GetPd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/GetPd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).GetPd(ctx, req.(*GetPdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_ListPd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).ListPd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/ListPd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).ListPd(ctx, req.(*ListPdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_ListForSp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForSpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).ListForSp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/ListForSp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).ListForSp(ctx, req.(*ListForSpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_FindPdByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).FindPdByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/FindPdByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).FindPdByName(ctx, req.(*ListPdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_ListPdByCi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPdByCiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).ListPdByCi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/ListPdByCi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).ListPdByCi(ctx, req.(*ListPdByCiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_CreateBn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).CreateBn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/CreateBn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).CreateBn(ctx, req.(*CreateBnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_UpdateBn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).UpdateBn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/UpdateBn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).UpdateBn(ctx, req.(*UpdateBnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_DeleteBn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).DeleteBn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/DeleteBn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).DeleteBn(ctx, req.(*DeleteBnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_GetBn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).GetBn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/GetBn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).GetBn(ctx, req.(*GetBnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_ListBn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).ListBn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/ListBn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).ListBn(ctx, req.(*ListBnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/CreateCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).CreateCart(ctx, req.(*CreateCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_UpdateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).UpdateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/UpdateCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).UpdateCart(ctx, req.(*UpdateCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_DeleteCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).DeleteCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/DeleteCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).DeleteCart(ctx, req.(*DeleteCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).GetCart(ctx, req.(*GetCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_ListCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).ListCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/ListCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).ListCart(ctx, req.(*ListCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_CreateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).CreateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/CreateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).CreateShop(ctx, req.(*CreateShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_UpdateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).UpdateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/UpdateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).UpdateShop(ctx, req.(*UpdateShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/DeleteShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).DeleteShop(ctx, req.(*DeleteShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_GetShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).GetShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/GetShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).GetShop(ctx, req.(*GetShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_GetSpByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpByUuidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).GetSpByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/GetSpByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).GetSpByUuid(ctx, req.(*GetSpByUuidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_ListShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).ListShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/ListShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).ListShop(ctx, req.(*ListShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_CreateCg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).CreateCg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/CreateCg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).CreateCg(ctx, req.(*CreateCgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_UpdateCg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).UpdateCg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/UpdateCg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).UpdateCg(ctx, req.(*UpdateCgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_DeleteCg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).DeleteCg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/DeleteCg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).DeleteCg(ctx, req.(*DeleteCgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_GetCg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).GetCg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/GetCg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).GetCg(ctx, req.(*GetCgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdService_ListCg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdServiceServer).ListCg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PdService/ListCg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdServiceServer).ListCg(ctx, req.(*ListCgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PdService_ServiceDesc is the grpc.ServiceDesc for PdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PdService",
	HandlerType: (*PdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePd",
			Handler:    _PdService_CreatePd_Handler,
		},
		{
			MethodName: "UpdatePd",
			Handler:    _PdService_UpdatePd_Handler,
		},
		{
			MethodName: "DeletePd",
			Handler:    _PdService_DeletePd_Handler,
		},
		{
			MethodName: "GetPd",
			Handler:    _PdService_GetPd_Handler,
		},
		{
			MethodName: "ListPd",
			Handler:    _PdService_ListPd_Handler,
		},
		{
			MethodName: "ListForSp",
			Handler:    _PdService_ListForSp_Handler,
		},
		{
			MethodName: "FindPdByName",
			Handler:    _PdService_FindPdByName_Handler,
		},
		{
			MethodName: "ListPdByCi",
			Handler:    _PdService_ListPdByCi_Handler,
		},
		{
			MethodName: "CreateBn",
			Handler:    _PdService_CreateBn_Handler,
		},
		{
			MethodName: "UpdateBn",
			Handler:    _PdService_UpdateBn_Handler,
		},
		{
			MethodName: "DeleteBn",
			Handler:    _PdService_DeleteBn_Handler,
		},
		{
			MethodName: "GetBn",
			Handler:    _PdService_GetBn_Handler,
		},
		{
			MethodName: "ListBn",
			Handler:    _PdService_ListBn_Handler,
		},
		{
			MethodName: "CreateCart",
			Handler:    _PdService_CreateCart_Handler,
		},
		{
			MethodName: "UpdateCart",
			Handler:    _PdService_UpdateCart_Handler,
		},
		{
			MethodName: "DeleteCart",
			Handler:    _PdService_DeleteCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _PdService_GetCart_Handler,
		},
		{
			MethodName: "ListCart",
			Handler:    _PdService_ListCart_Handler,
		},
		{
			MethodName: "CreateShop",
			Handler:    _PdService_CreateShop_Handler,
		},
		{
			MethodName: "UpdateShop",
			Handler:    _PdService_UpdateShop_Handler,
		},
		{
			MethodName: "DeleteShop",
			Handler:    _PdService_DeleteShop_Handler,
		},
		{
			MethodName: "GetShop",
			Handler:    _PdService_GetShop_Handler,
		},
		{
			MethodName: "GetSpByUuid",
			Handler:    _PdService_GetSpByUuid_Handler,
		},
		{
			MethodName: "ListShop",
			Handler:    _PdService_ListShop_Handler,
		},
		{
			MethodName: "CreateCg",
			Handler:    _PdService_CreateCg_Handler,
		},
		{
			MethodName: "UpdateCg",
			Handler:    _PdService_UpdateCg_Handler,
		},
		{
			MethodName: "DeleteCg",
			Handler:    _PdService_DeleteCg_Handler,
		},
		{
			MethodName: "GetCg",
			Handler:    _PdService_GetCg_Handler,
		},
		{
			MethodName: "ListCg",
			Handler:    _PdService_ListCg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/product.proto",
}
