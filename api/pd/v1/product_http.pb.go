// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type PdServiceHTTPServer interface {
	CreateBn(context.Context, *CreateBnReq) (*CreateBnReply, error)
	CreateCart(context.Context, *CreateCartReq) (*CreateCartReply, error)
	CreateCg(context.Context, *CreateCgReq) (*CreateCgReply, error)
	CreatePd(context.Context, *CreatePdReq) (*CreatePdReply, error)
	CreateShop(context.Context, *CreateShopReq) (*CreateShopReply, error)
	DeleteBn(context.Context, *DeleteBnReq) (*DeleteBnReply, error)
	DeleteCart(context.Context, *DeleteCartReq) (*DeleteCartReply, error)
	DeleteCg(context.Context, *DeleteCgReq) (*DeleteCgReply, error)
	DeletePd(context.Context, *DeletePdReq) (*DeletePdReply, error)
	DeleteShop(context.Context, *DeleteShopReq) (*DeleteShopReply, error)
	FindPdByName(context.Context, *ListPdReq) (*ListPdReply, error)
	GetBn(context.Context, *GetBnReq) (*GetBnReply, error)
	GetCart(context.Context, *GetCartReq) (*GetCartReply, error)
	GetCg(context.Context, *GetCgReq) (*GetCgReply, error)
	GetPd(context.Context, *GetPdReq) (*GetPdReply, error)
	GetShop(context.Context, *GetShopReq) (*GetShopReply, error)
	GetSpByUuid(context.Context, *GetSpByUuidReq) (*GetSpByUuidReply, error)
	ListBn(context.Context, *ListBnReq) (*ListBnReply, error)
	ListCart(context.Context, *ListCartReq) (*ListCartReply, error)
	ListCg(context.Context, *ListCgReq) (*ListCgReply, error)
	ListForSp(context.Context, *ListForSpReq) (*ListForSpReply, error)
	ListPd(context.Context, *ListPdReq) (*ListPdReply, error)
	ListPdByCi(context.Context, *ListPdByCiReq) (*ListPdByCiReply, error)
	ListShop(context.Context, *ListShopReq) (*ListShopReply, error)
	UpdateBn(context.Context, *UpdateBnReq) (*UpdateBnReply, error)
	UpdateCart(context.Context, *UpdateCartReq) (*UpdateCartReply, error)
	UpdateCg(context.Context, *UpdateCgReq) (*UpdateCgReply, error)
	UpdatePd(context.Context, *UpdatePdReq) (*UpdatePdReply, error)
	UpdateShop(context.Context, *UpdateShopReq) (*UpdateShopReply, error)
}

func RegisterPdServiceHTTPServer(s *http.Server, srv PdServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/product/create", _PdService_CreatePd0_HTTP_Handler(srv))
	r.PUT("/api/product/update", _PdService_UpdatePd0_HTTP_Handler(srv))
	r.DELETE("/api/product/delete/{userUuid}/{id}", _PdService_DeletePd0_HTTP_Handler(srv))
	r.GET("/api/product/{id}", _PdService_GetPd0_HTTP_Handler(srv))
	r.GET("/api/product/list/{page}/{limit}/{name}", _PdService_ListPd0_HTTP_Handler(srv))
	r.GET("/api/product/list/{page}/{limit}/{shopId}", _PdService_ListForSp0_HTTP_Handler(srv))
	r.GET("/api/product/list/{page}/{limit}/{name}", _PdService_FindPdByName0_HTTP_Handler(srv))
	r.GET("/api/product/listbycategoryid/{categoryId}/{page}/{limit}", _PdService_ListPdByCi0_HTTP_Handler(srv))
	r.POST("/api/banner/create", _PdService_CreateBn0_HTTP_Handler(srv))
	r.PUT("/api/banner/update", _PdService_UpdateBn0_HTTP_Handler(srv))
	r.DELETE("/api/banner/delete/{id}", _PdService_DeleteBn0_HTTP_Handler(srv))
	r.GET("/api/banner/get/{id}", _PdService_GetBn0_HTTP_Handler(srv))
	r.GET("/api/banner/list/{page}/{limit}", _PdService_ListBn0_HTTP_Handler(srv))
	r.POST("/api/cart/create", _PdService_CreateCart0_HTTP_Handler(srv))
	r.PUT("/api/cart/update", _PdService_UpdateCart0_HTTP_Handler(srv))
	r.DELETE("/api/cart/delete/{userUuid}/{id}", _PdService_DeleteCart0_HTTP_Handler(srv))
	r.GET("/api/cart/get/{id}/{userUuid}", _PdService_GetCart0_HTTP_Handler(srv))
	r.GET("/api/cart/list/{userUuid}/{page}/{limit}", _PdService_ListCart0_HTTP_Handler(srv))
	r.POST("/api/shop/create", _PdService_CreateShop0_HTTP_Handler(srv))
	r.PUT("/api/shop/update", _PdService_UpdateShop0_HTTP_Handler(srv))
	r.DELETE("/api/shop/delete/{userUuid}/{id}", _PdService_DeleteShop0_HTTP_Handler(srv))
	r.GET("/api/shop/get/{id}", _PdService_GetShop0_HTTP_Handler(srv))
	r.GET("/api/shop/getByUuid/{userUuid}", _PdService_GetSpByUuid0_HTTP_Handler(srv))
	r.GET("/api/shop/list/{page}/{limit}/{name}", _PdService_ListShop0_HTTP_Handler(srv))
	r.POST("/api/category/create", _PdService_CreateCg0_HTTP_Handler(srv))
	r.PUT("/api/category/update", _PdService_UpdateCg0_HTTP_Handler(srv))
	r.DELETE("/api/category/delete/{id}", _PdService_DeleteCg0_HTTP_Handler(srv))
	r.GET("/api/category/get/{id}", _PdService_GetCg0_HTTP_Handler(srv))
	r.GET("/api/category/list/{page}/{limit}", _PdService_ListCg0_HTTP_Handler(srv))
}

func _PdService_CreatePd0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/CreatePd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePd(ctx, req.(*CreatePdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePdReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_UpdatePd0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/UpdatePd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePd(ctx, req.(*UpdatePdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePdReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_DeletePd0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/DeletePd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePd(ctx, req.(*DeletePdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePdReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_GetPd0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/GetPd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPd(ctx, req.(*GetPdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPdReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_ListPd0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/ListPd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPd(ctx, req.(*ListPdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPdReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_ListForSp0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListForSpReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/ListForSp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListForSp(ctx, req.(*ListForSpReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListForSpReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_FindPdByName0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/FindPdByName")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindPdByName(ctx, req.(*ListPdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPdReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_ListPdByCi0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPdByCiReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/ListPdByCi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPdByCi(ctx, req.(*ListPdByCiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPdByCiReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_CreateBn0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/CreateBn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBn(ctx, req.(*CreateBnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBnReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_UpdateBn0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/UpdateBn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBn(ctx, req.(*UpdateBnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBnReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_DeleteBn0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBnReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/DeleteBn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBn(ctx, req.(*DeleteBnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBnReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_GetBn0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBnReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/GetBn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBn(ctx, req.(*GetBnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBnReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_ListBn0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBnReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/ListBn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBn(ctx, req.(*ListBnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBnReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_CreateCart0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCartReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/CreateCart")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCart(ctx, req.(*CreateCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCartReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_UpdateCart0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCartReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/UpdateCart")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCart(ctx, req.(*UpdateCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCartReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_DeleteCart0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCartReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/DeleteCart")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCart(ctx, req.(*DeleteCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCartReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_GetCart0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCartReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/GetCart")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCart(ctx, req.(*GetCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCartReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_ListCart0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCartReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/ListCart")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCart(ctx, req.(*ListCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCartReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_CreateShop0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateShopReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/CreateShop")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateShop(ctx, req.(*CreateShopReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateShopReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_UpdateShop0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateShopReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/UpdateShop")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateShop(ctx, req.(*UpdateShopReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateShopReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_DeleteShop0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteShopReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/DeleteShop")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteShop(ctx, req.(*DeleteShopReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteShopReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_GetShop0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShopReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/GetShop")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShop(ctx, req.(*GetShopReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetShopReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_GetSpByUuid0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpByUuidReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/GetSpByUuid")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpByUuid(ctx, req.(*GetSpByUuidReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpByUuidReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_ListShop0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListShopReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/ListShop")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListShop(ctx, req.(*ListShopReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListShopReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_CreateCg0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCgReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/CreateCg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCg(ctx, req.(*CreateCgReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCgReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_UpdateCg0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCgReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/UpdateCg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCg(ctx, req.(*UpdateCgReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCgReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_DeleteCg0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCgReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/DeleteCg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCg(ctx, req.(*DeleteCgReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCgReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_GetCg0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCgReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/GetCg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCg(ctx, req.(*GetCgReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCgReply)
		return ctx.Result(200, reply)
	}
}

func _PdService_ListCg0_HTTP_Handler(srv PdServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCgReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.PdService/ListCg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCg(ctx, req.(*ListCgReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCgReply)
		return ctx.Result(200, reply)
	}
}

type PdServiceHTTPClient interface {
	CreateBn(ctx context.Context, req *CreateBnReq, opts ...http.CallOption) (rsp *CreateBnReply, err error)
	CreateCart(ctx context.Context, req *CreateCartReq, opts ...http.CallOption) (rsp *CreateCartReply, err error)
	CreateCg(ctx context.Context, req *CreateCgReq, opts ...http.CallOption) (rsp *CreateCgReply, err error)
	CreatePd(ctx context.Context, req *CreatePdReq, opts ...http.CallOption) (rsp *CreatePdReply, err error)
	CreateShop(ctx context.Context, req *CreateShopReq, opts ...http.CallOption) (rsp *CreateShopReply, err error)
	DeleteBn(ctx context.Context, req *DeleteBnReq, opts ...http.CallOption) (rsp *DeleteBnReply, err error)
	DeleteCart(ctx context.Context, req *DeleteCartReq, opts ...http.CallOption) (rsp *DeleteCartReply, err error)
	DeleteCg(ctx context.Context, req *DeleteCgReq, opts ...http.CallOption) (rsp *DeleteCgReply, err error)
	DeletePd(ctx context.Context, req *DeletePdReq, opts ...http.CallOption) (rsp *DeletePdReply, err error)
	DeleteShop(ctx context.Context, req *DeleteShopReq, opts ...http.CallOption) (rsp *DeleteShopReply, err error)
	FindPdByName(ctx context.Context, req *ListPdReq, opts ...http.CallOption) (rsp *ListPdReply, err error)
	GetBn(ctx context.Context, req *GetBnReq, opts ...http.CallOption) (rsp *GetBnReply, err error)
	GetCart(ctx context.Context, req *GetCartReq, opts ...http.CallOption) (rsp *GetCartReply, err error)
	GetCg(ctx context.Context, req *GetCgReq, opts ...http.CallOption) (rsp *GetCgReply, err error)
	GetPd(ctx context.Context, req *GetPdReq, opts ...http.CallOption) (rsp *GetPdReply, err error)
	GetShop(ctx context.Context, req *GetShopReq, opts ...http.CallOption) (rsp *GetShopReply, err error)
	GetSpByUuid(ctx context.Context, req *GetSpByUuidReq, opts ...http.CallOption) (rsp *GetSpByUuidReply, err error)
	ListBn(ctx context.Context, req *ListBnReq, opts ...http.CallOption) (rsp *ListBnReply, err error)
	ListCart(ctx context.Context, req *ListCartReq, opts ...http.CallOption) (rsp *ListCartReply, err error)
	ListCg(ctx context.Context, req *ListCgReq, opts ...http.CallOption) (rsp *ListCgReply, err error)
	ListForSp(ctx context.Context, req *ListForSpReq, opts ...http.CallOption) (rsp *ListForSpReply, err error)
	ListPd(ctx context.Context, req *ListPdReq, opts ...http.CallOption) (rsp *ListPdReply, err error)
	ListPdByCi(ctx context.Context, req *ListPdByCiReq, opts ...http.CallOption) (rsp *ListPdByCiReply, err error)
	ListShop(ctx context.Context, req *ListShopReq, opts ...http.CallOption) (rsp *ListShopReply, err error)
	UpdateBn(ctx context.Context, req *UpdateBnReq, opts ...http.CallOption) (rsp *UpdateBnReply, err error)
	UpdateCart(ctx context.Context, req *UpdateCartReq, opts ...http.CallOption) (rsp *UpdateCartReply, err error)
	UpdateCg(ctx context.Context, req *UpdateCgReq, opts ...http.CallOption) (rsp *UpdateCgReply, err error)
	UpdatePd(ctx context.Context, req *UpdatePdReq, opts ...http.CallOption) (rsp *UpdatePdReply, err error)
	UpdateShop(ctx context.Context, req *UpdateShopReq, opts ...http.CallOption) (rsp *UpdateShopReply, err error)
}

type PdServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPdServiceHTTPClient(client *http.Client) PdServiceHTTPClient {
	return &PdServiceHTTPClientImpl{client}
}

func (c *PdServiceHTTPClientImpl) CreateBn(ctx context.Context, in *CreateBnReq, opts ...http.CallOption) (*CreateBnReply, error) {
	var out CreateBnReply
	pattern := "/api/banner/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/CreateBn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) CreateCart(ctx context.Context, in *CreateCartReq, opts ...http.CallOption) (*CreateCartReply, error) {
	var out CreateCartReply
	pattern := "/api/cart/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/CreateCart"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) CreateCg(ctx context.Context, in *CreateCgReq, opts ...http.CallOption) (*CreateCgReply, error) {
	var out CreateCgReply
	pattern := "/api/category/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/CreateCg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) CreatePd(ctx context.Context, in *CreatePdReq, opts ...http.CallOption) (*CreatePdReply, error) {
	var out CreatePdReply
	pattern := "/api/product/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/CreatePd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) CreateShop(ctx context.Context, in *CreateShopReq, opts ...http.CallOption) (*CreateShopReply, error) {
	var out CreateShopReply
	pattern := "/api/shop/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/CreateShop"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) DeleteBn(ctx context.Context, in *DeleteBnReq, opts ...http.CallOption) (*DeleteBnReply, error) {
	var out DeleteBnReply
	pattern := "/api/banner/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/DeleteBn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) DeleteCart(ctx context.Context, in *DeleteCartReq, opts ...http.CallOption) (*DeleteCartReply, error) {
	var out DeleteCartReply
	pattern := "/api/cart/delete/{userUuid}/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/DeleteCart"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) DeleteCg(ctx context.Context, in *DeleteCgReq, opts ...http.CallOption) (*DeleteCgReply, error) {
	var out DeleteCgReply
	pattern := "/api/category/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/DeleteCg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) DeletePd(ctx context.Context, in *DeletePdReq, opts ...http.CallOption) (*DeletePdReply, error) {
	var out DeletePdReply
	pattern := "/api/product/delete/{userUuid}/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/DeletePd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) DeleteShop(ctx context.Context, in *DeleteShopReq, opts ...http.CallOption) (*DeleteShopReply, error) {
	var out DeleteShopReply
	pattern := "/api/shop/delete/{userUuid}/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/DeleteShop"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) FindPdByName(ctx context.Context, in *ListPdReq, opts ...http.CallOption) (*ListPdReply, error) {
	var out ListPdReply
	pattern := "/api/product/list/{page}/{limit}/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/FindPdByName"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) GetBn(ctx context.Context, in *GetBnReq, opts ...http.CallOption) (*GetBnReply, error) {
	var out GetBnReply
	pattern := "/api/banner/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/GetBn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) GetCart(ctx context.Context, in *GetCartReq, opts ...http.CallOption) (*GetCartReply, error) {
	var out GetCartReply
	pattern := "/api/cart/get/{id}/{userUuid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/GetCart"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) GetCg(ctx context.Context, in *GetCgReq, opts ...http.CallOption) (*GetCgReply, error) {
	var out GetCgReply
	pattern := "/api/category/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/GetCg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) GetPd(ctx context.Context, in *GetPdReq, opts ...http.CallOption) (*GetPdReply, error) {
	var out GetPdReply
	pattern := "/api/product/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/GetPd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) GetShop(ctx context.Context, in *GetShopReq, opts ...http.CallOption) (*GetShopReply, error) {
	var out GetShopReply
	pattern := "/api/shop/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/GetShop"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) GetSpByUuid(ctx context.Context, in *GetSpByUuidReq, opts ...http.CallOption) (*GetSpByUuidReply, error) {
	var out GetSpByUuidReply
	pattern := "/api/shop/getByUuid/{userUuid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/GetSpByUuid"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) ListBn(ctx context.Context, in *ListBnReq, opts ...http.CallOption) (*ListBnReply, error) {
	var out ListBnReply
	pattern := "/api/banner/list/{page}/{limit}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/ListBn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) ListCart(ctx context.Context, in *ListCartReq, opts ...http.CallOption) (*ListCartReply, error) {
	var out ListCartReply
	pattern := "/api/cart/list/{userUuid}/{page}/{limit}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/ListCart"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) ListCg(ctx context.Context, in *ListCgReq, opts ...http.CallOption) (*ListCgReply, error) {
	var out ListCgReply
	pattern := "/api/category/list/{page}/{limit}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/ListCg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) ListForSp(ctx context.Context, in *ListForSpReq, opts ...http.CallOption) (*ListForSpReply, error) {
	var out ListForSpReply
	pattern := "/api/product/list/{page}/{limit}/{shopId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/ListForSp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) ListPd(ctx context.Context, in *ListPdReq, opts ...http.CallOption) (*ListPdReply, error) {
	var out ListPdReply
	pattern := "/api/product/list/{page}/{limit}/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/ListPd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) ListPdByCi(ctx context.Context, in *ListPdByCiReq, opts ...http.CallOption) (*ListPdByCiReply, error) {
	var out ListPdByCiReply
	pattern := "/api/product/listbycategoryid/{categoryId}/{page}/{limit}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/ListPdByCi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) ListShop(ctx context.Context, in *ListShopReq, opts ...http.CallOption) (*ListShopReply, error) {
	var out ListShopReply
	pattern := "/api/shop/list/{page}/{limit}/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.PdService/ListShop"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) UpdateBn(ctx context.Context, in *UpdateBnReq, opts ...http.CallOption) (*UpdateBnReply, error) {
	var out UpdateBnReply
	pattern := "/api/banner/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/UpdateBn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) UpdateCart(ctx context.Context, in *UpdateCartReq, opts ...http.CallOption) (*UpdateCartReply, error) {
	var out UpdateCartReply
	pattern := "/api/cart/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/UpdateCart"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) UpdateCg(ctx context.Context, in *UpdateCgReq, opts ...http.CallOption) (*UpdateCgReply, error) {
	var out UpdateCgReply
	pattern := "/api/category/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/UpdateCg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) UpdatePd(ctx context.Context, in *UpdatePdReq, opts ...http.CallOption) (*UpdatePdReply, error) {
	var out UpdatePdReply
	pattern := "/api/product/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/UpdatePd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PdServiceHTTPClientImpl) UpdateShop(ctx context.Context, in *UpdateShopReq, opts ...http.CallOption) (*UpdateShopReply, error) {
	var out UpdateShopReply
	pattern := "/api/shop/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.PdService/UpdateShop"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
