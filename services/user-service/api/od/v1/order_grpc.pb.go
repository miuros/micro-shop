// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/od/v1/order.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OdSrvClient is the client API for OdSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OdSrvClient interface {
	CreateOd(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderReply, error)
	UpdateOd(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderReply, error)
	DeleteOd(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*DeleteOrderReply, error)
	GetOd(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderReply, error)
	ListOd(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderReply, error)
	ListOdByCateId(ctx context.Context, in *ListOrderByCateIdReq, opts ...grpc.CallOption) (*ListOrderByCateIdReply, error)
	ListOdForShopper(ctx context.Context, in *ListOdForSReq, opts ...grpc.CallOption) (*ListOdForSpReply, error)
	PayOd(ctx context.Context, in *PayOdReq, opts ...grpc.CallOption) (*PayOdReply, error)
	CreateStock(ctx context.Context, in *CreateStockReq, opts ...grpc.CallOption) (*CreateStockReply, error)
	UpdateStock(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*UpdateStockReply, error)
	DeleteStock(ctx context.Context, in *DeleteStockReq, opts ...grpc.CallOption) (*DeleteStockReply, error)
	GetStock(ctx context.Context, in *GetStockReq, opts ...grpc.CallOption) (*GetStockReply, error)
	CreateCate(ctx context.Context, in *CreateCateReq, opts ...grpc.CallOption) (*CreateCateReply, error)
}

type odSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewOdSrvClient(cc grpc.ClientConnInterface) OdSrvClient {
	return &odSrvClient{cc}
}

func (c *odSrvClient) CreateOd(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderReply, error) {
	out := new(CreateOrderReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/CreateOd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) UpdateOd(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderReply, error) {
	out := new(UpdateOrderReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/UpdateOd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) DeleteOd(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*DeleteOrderReply, error) {
	out := new(DeleteOrderReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/DeleteOd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) GetOd(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderReply, error) {
	out := new(GetOrderReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/GetOd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) ListOd(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderReply, error) {
	out := new(ListOrderReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/ListOd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) ListOdByCateId(ctx context.Context, in *ListOrderByCateIdReq, opts ...grpc.CallOption) (*ListOrderByCateIdReply, error) {
	out := new(ListOrderByCateIdReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/ListOdByCateId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) ListOdForShopper(ctx context.Context, in *ListOdForSReq, opts ...grpc.CallOption) (*ListOdForSpReply, error) {
	out := new(ListOdForSpReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/ListOdForShopper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) PayOd(ctx context.Context, in *PayOdReq, opts ...grpc.CallOption) (*PayOdReply, error) {
	out := new(PayOdReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/PayOd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) CreateStock(ctx context.Context, in *CreateStockReq, opts ...grpc.CallOption) (*CreateStockReply, error) {
	out := new(CreateStockReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/CreateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) UpdateStock(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*UpdateStockReply, error) {
	out := new(UpdateStockReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/UpdateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) DeleteStock(ctx context.Context, in *DeleteStockReq, opts ...grpc.CallOption) (*DeleteStockReply, error) {
	out := new(DeleteStockReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/DeleteStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) GetStock(ctx context.Context, in *GetStockReq, opts ...grpc.CallOption) (*GetStockReply, error) {
	out := new(GetStockReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/GetStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odSrvClient) CreateCate(ctx context.Context, in *CreateCateReq, opts ...grpc.CallOption) (*CreateCateReply, error) {
	out := new(CreateCateReply)
	err := c.cc.Invoke(ctx, "/api.user.OdSrv/CreateCate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OdSrvServer is the server API for OdSrv service.
// All implementations must embed UnimplementedOdSrvServer
// for forward compatibility
type OdSrvServer interface {
	CreateOd(context.Context, *CreateOrderReq) (*CreateOrderReply, error)
	UpdateOd(context.Context, *UpdateOrderReq) (*UpdateOrderReply, error)
	DeleteOd(context.Context, *DeleteOrderReq) (*DeleteOrderReply, error)
	GetOd(context.Context, *GetOrderReq) (*GetOrderReply, error)
	ListOd(context.Context, *ListOrderReq) (*ListOrderReply, error)
	ListOdByCateId(context.Context, *ListOrderByCateIdReq) (*ListOrderByCateIdReply, error)
	ListOdForShopper(context.Context, *ListOdForSReq) (*ListOdForSpReply, error)
	PayOd(context.Context, *PayOdReq) (*PayOdReply, error)
	CreateStock(context.Context, *CreateStockReq) (*CreateStockReply, error)
	UpdateStock(context.Context, *UpdateStockReq) (*UpdateStockReply, error)
	DeleteStock(context.Context, *DeleteStockReq) (*DeleteStockReply, error)
	GetStock(context.Context, *GetStockReq) (*GetStockReply, error)
	CreateCate(context.Context, *CreateCateReq) (*CreateCateReply, error)
	mustEmbedUnimplementedOdSrvServer()
}

// UnimplementedOdSrvServer must be embedded to have forward compatible implementations.
type UnimplementedOdSrvServer struct {
}

func (UnimplementedOdSrvServer) CreateOd(context.Context, *CreateOrderReq) (*CreateOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOd not implemented")
}
func (UnimplementedOdSrvServer) UpdateOd(context.Context, *UpdateOrderReq) (*UpdateOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOd not implemented")
}
func (UnimplementedOdSrvServer) DeleteOd(context.Context, *DeleteOrderReq) (*DeleteOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOd not implemented")
}
func (UnimplementedOdSrvServer) GetOd(context.Context, *GetOrderReq) (*GetOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOd not implemented")
}
func (UnimplementedOdSrvServer) ListOd(context.Context, *ListOrderReq) (*ListOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOd not implemented")
}
func (UnimplementedOdSrvServer) ListOdByCateId(context.Context, *ListOrderByCateIdReq) (*ListOrderByCateIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOdByCateId not implemented")
}
func (UnimplementedOdSrvServer) ListOdForShopper(context.Context, *ListOdForSReq) (*ListOdForSpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOdForShopper not implemented")
}
func (UnimplementedOdSrvServer) PayOd(context.Context, *PayOdReq) (*PayOdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOd not implemented")
}
func (UnimplementedOdSrvServer) CreateStock(context.Context, *CreateStockReq) (*CreateStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStock not implemented")
}
func (UnimplementedOdSrvServer) UpdateStock(context.Context, *UpdateStockReq) (*UpdateStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedOdSrvServer) DeleteStock(context.Context, *DeleteStockReq) (*DeleteStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStock not implemented")
}
func (UnimplementedOdSrvServer) GetStock(context.Context, *GetStockReq) (*GetStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedOdSrvServer) CreateCate(context.Context, *CreateCateReq) (*CreateCateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCate not implemented")
}
func (UnimplementedOdSrvServer) mustEmbedUnimplementedOdSrvServer() {}

// UnsafeOdSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OdSrvServer will
// result in compilation errors.
type UnsafeOdSrvServer interface {
	mustEmbedUnimplementedOdSrvServer()
}

func RegisterOdSrvServer(s grpc.ServiceRegistrar, srv OdSrvServer) {
	s.RegisterService(&OdSrv_ServiceDesc, srv)
}

func _OdSrv_CreateOd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).CreateOd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/CreateOd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).CreateOd(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_UpdateOd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).UpdateOd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/UpdateOd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).UpdateOd(ctx, req.(*UpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_DeleteOd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).DeleteOd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/DeleteOd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).DeleteOd(ctx, req.(*DeleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_GetOd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).GetOd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/GetOd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).GetOd(ctx, req.(*GetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_ListOd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).ListOd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/ListOd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).ListOd(ctx, req.(*ListOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_ListOdByCateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderByCateIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).ListOdByCateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/ListOdByCateId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).ListOdByCateId(ctx, req.(*ListOrderByCateIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_ListOdForShopper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOdForSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).ListOdForShopper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/ListOdForShopper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).ListOdForShopper(ctx, req.(*ListOdForSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_PayOd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).PayOd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/PayOd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).PayOd(ctx, req.(*PayOdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_CreateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).CreateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/CreateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).CreateStock(ctx, req.(*CreateStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/UpdateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).UpdateStock(ctx, req.(*UpdateStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_DeleteStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).DeleteStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/DeleteStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).DeleteStock(ctx, req.(*DeleteStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/GetStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).GetStock(ctx, req.(*GetStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdSrv_CreateCate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdSrvServer).CreateCate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.OdSrv/CreateCate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdSrvServer).CreateCate(ctx, req.(*CreateCateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OdSrv_ServiceDesc is the grpc.ServiceDesc for OdSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OdSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.OdSrv",
	HandlerType: (*OdSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOd",
			Handler:    _OdSrv_CreateOd_Handler,
		},
		{
			MethodName: "UpdateOd",
			Handler:    _OdSrv_UpdateOd_Handler,
		},
		{
			MethodName: "DeleteOd",
			Handler:    _OdSrv_DeleteOd_Handler,
		},
		{
			MethodName: "GetOd",
			Handler:    _OdSrv_GetOd_Handler,
		},
		{
			MethodName: "ListOd",
			Handler:    _OdSrv_ListOd_Handler,
		},
		{
			MethodName: "ListOdByCateId",
			Handler:    _OdSrv_ListOdByCateId_Handler,
		},
		{
			MethodName: "ListOdForShopper",
			Handler:    _OdSrv_ListOdForShopper_Handler,
		},
		{
			MethodName: "PayOd",
			Handler:    _OdSrv_PayOd_Handler,
		},
		{
			MethodName: "CreateStock",
			Handler:    _OdSrv_CreateStock_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _OdSrv_UpdateStock_Handler,
		},
		{
			MethodName: "DeleteStock",
			Handler:    _OdSrv_DeleteStock_Handler,
		},
		{
			MethodName: "GetStock",
			Handler:    _OdSrv_GetStock_Handler,
		},
		{
			MethodName: "CreateCate",
			Handler:    _OdSrv_CreateCate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/od/v1/order.proto",
}
