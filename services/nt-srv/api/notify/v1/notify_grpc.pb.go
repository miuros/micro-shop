// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/notify/v1/notify.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NtSrvClient is the client API for NtSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NtSrvClient interface {
	CreateNt(ctx context.Context, in *CreateNtReq, opts ...grpc.CallOption) (*CreateNtReply, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateStatusReply, error)
	ListNt(ctx context.Context, in *ListNtReq, opts ...grpc.CallOption) (*ListNtReply, error)
	DeleteNt(ctx context.Context, in *DeleteNtReq, opts ...grpc.CallOption) (*DeleteNtReply, error)
	GetNt(ctx context.Context, in *GetNtReq, opts ...grpc.CallOption) (*GetNtReply, error)
}

type ntSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewNtSrvClient(cc grpc.ClientConnInterface) NtSrvClient {
	return &ntSrvClient{cc}
}

func (c *ntSrvClient) CreateNt(ctx context.Context, in *CreateNtReq, opts ...grpc.CallOption) (*CreateNtReply, error) {
	out := new(CreateNtReply)
	err := c.cc.Invoke(ctx, "/api.user.ntSrv/CreateNt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ntSrvClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateStatusReply, error) {
	out := new(UpdateStatusReply)
	err := c.cc.Invoke(ctx, "/api.user.ntSrv/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ntSrvClient) ListNt(ctx context.Context, in *ListNtReq, opts ...grpc.CallOption) (*ListNtReply, error) {
	out := new(ListNtReply)
	err := c.cc.Invoke(ctx, "/api.user.ntSrv/ListNt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ntSrvClient) DeleteNt(ctx context.Context, in *DeleteNtReq, opts ...grpc.CallOption) (*DeleteNtReply, error) {
	out := new(DeleteNtReply)
	err := c.cc.Invoke(ctx, "/api.user.ntSrv/DeleteNt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ntSrvClient) GetNt(ctx context.Context, in *GetNtReq, opts ...grpc.CallOption) (*GetNtReply, error) {
	out := new(GetNtReply)
	err := c.cc.Invoke(ctx, "/api.user.ntSrv/GetNt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NtSrvServer is the server API for NtSrv service.
// All implementations must embed UnimplementedNtSrvServer
// for forward compatibility
type NtSrvServer interface {
	CreateNt(context.Context, *CreateNtReq) (*CreateNtReply, error)
	UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateStatusReply, error)
	ListNt(context.Context, *ListNtReq) (*ListNtReply, error)
	DeleteNt(context.Context, *DeleteNtReq) (*DeleteNtReply, error)
	GetNt(context.Context, *GetNtReq) (*GetNtReply, error)
	mustEmbedUnimplementedNtSrvServer()
}

// UnimplementedNtSrvServer must be embedded to have forward compatible implementations.
type UnimplementedNtSrvServer struct {
}

func (UnimplementedNtSrvServer) CreateNt(context.Context, *CreateNtReq) (*CreateNtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNt not implemented")
}
func (UnimplementedNtSrvServer) UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedNtSrvServer) ListNt(context.Context, *ListNtReq) (*ListNtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNt not implemented")
}
func (UnimplementedNtSrvServer) DeleteNt(context.Context, *DeleteNtReq) (*DeleteNtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNt not implemented")
}
func (UnimplementedNtSrvServer) GetNt(context.Context, *GetNtReq) (*GetNtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNt not implemented")
}
func (UnimplementedNtSrvServer) mustEmbedUnimplementedNtSrvServer() {}

// UnsafeNtSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NtSrvServer will
// result in compilation errors.
type UnsafeNtSrvServer interface {
	mustEmbedUnimplementedNtSrvServer()
}

func RegisterNtSrvServer(s grpc.ServiceRegistrar, srv NtSrvServer) {
	s.RegisterService(&NtSrv_ServiceDesc, srv)
}

func _NtSrv_CreateNt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NtSrvServer).CreateNt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.ntSrv/CreateNt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NtSrvServer).CreateNt(ctx, req.(*CreateNtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NtSrv_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NtSrvServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.ntSrv/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NtSrvServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NtSrv_ListNt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NtSrvServer).ListNt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.ntSrv/ListNt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NtSrvServer).ListNt(ctx, req.(*ListNtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NtSrv_DeleteNt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NtSrvServer).DeleteNt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.ntSrv/DeleteNt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NtSrvServer).DeleteNt(ctx, req.(*DeleteNtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NtSrv_GetNt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NtSrvServer).GetNt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.ntSrv/GetNt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NtSrvServer).GetNt(ctx, req.(*GetNtReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NtSrv_ServiceDesc is the grpc.ServiceDesc for NtSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NtSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.ntSrv",
	HandlerType: (*NtSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNt",
			Handler:    _NtSrv_CreateNt_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _NtSrv_UpdateStatus_Handler,
		},
		{
			MethodName: "ListNt",
			Handler:    _NtSrv_ListNt_Handler,
		},
		{
			MethodName: "DeleteNt",
			Handler:    _NtSrv_DeleteNt_Handler,
		},
		{
			MethodName: "GetNt",
			Handler:    _NtSrv_GetNt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/notify/v1/notify.proto",
}
