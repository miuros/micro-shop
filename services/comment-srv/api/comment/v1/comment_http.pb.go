// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CmServiceHTTPServer interface {
	CreateCm(context.Context, *CreateCmReq) (*CreateCmReply, error)
	DeleteCm(context.Context, *DeleteCmReq) (*DeleteCmReply, error)
	GetCm(context.Context, *GetCmReq) (*GetCmReply, error)
	ListCm(context.Context, *ListCmReq) (*ListCmReply, error)
	UpdateCm(context.Context, *UpdateCmReq) (*UpdateCmReply, error)
}

func RegisterCmServiceHTTPServer(s *http.Server, srv CmServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/comment/create", _CmService_CreateCm0_HTTP_Handler(srv))
	r.PUT("/api/comment/update", _CmService_UpdateCm0_HTTP_Handler(srv))
	r.DELETE("/api/comment/delete/{id}/{userUuid}", _CmService_DeleteCm0_HTTP_Handler(srv))
	r.GET("/api/comment/get/{id}", _CmService_GetCm0_HTTP_Handler(srv))
	r.GET("/api/comment/list/{page}/{limit}/{productId}", _CmService_ListCm0_HTTP_Handler(srv))
}

func _CmService_CreateCm0_HTTP_Handler(srv CmServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCmReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.CmService/CreateCm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCm(ctx, req.(*CreateCmReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCmReply)
		return ctx.Result(200, reply)
	}
}

func _CmService_UpdateCm0_HTTP_Handler(srv CmServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCmReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.CmService/UpdateCm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCm(ctx, req.(*UpdateCmReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCmReply)
		return ctx.Result(200, reply)
	}
}

func _CmService_DeleteCm0_HTTP_Handler(srv CmServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCmReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.CmService/DeleteCm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCm(ctx, req.(*DeleteCmReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCmReply)
		return ctx.Result(200, reply)
	}
}

func _CmService_GetCm0_HTTP_Handler(srv CmServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCmReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.CmService/GetCm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCm(ctx, req.(*GetCmReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCmReply)
		return ctx.Result(200, reply)
	}
}

func _CmService_ListCm0_HTTP_Handler(srv CmServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCmReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/v1.CmService/ListCm")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCm(ctx, req.(*ListCmReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCmReply)
		return ctx.Result(200, reply)
	}
}

type CmServiceHTTPClient interface {
	CreateCm(ctx context.Context, req *CreateCmReq, opts ...http.CallOption) (rsp *CreateCmReply, err error)
	DeleteCm(ctx context.Context, req *DeleteCmReq, opts ...http.CallOption) (rsp *DeleteCmReply, err error)
	GetCm(ctx context.Context, req *GetCmReq, opts ...http.CallOption) (rsp *GetCmReply, err error)
	ListCm(ctx context.Context, req *ListCmReq, opts ...http.CallOption) (rsp *ListCmReply, err error)
	UpdateCm(ctx context.Context, req *UpdateCmReq, opts ...http.CallOption) (rsp *UpdateCmReply, err error)
}

type CmServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCmServiceHTTPClient(client *http.Client) CmServiceHTTPClient {
	return &CmServiceHTTPClientImpl{client}
}

func (c *CmServiceHTTPClientImpl) CreateCm(ctx context.Context, in *CreateCmReq, opts ...http.CallOption) (*CreateCmReply, error) {
	var out CreateCmReply
	pattern := "/api/comment/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.CmService/CreateCm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmServiceHTTPClientImpl) DeleteCm(ctx context.Context, in *DeleteCmReq, opts ...http.CallOption) (*DeleteCmReply, error) {
	var out DeleteCmReply
	pattern := "/api/comment/delete/{id}/{userUuid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.CmService/DeleteCm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmServiceHTTPClientImpl) GetCm(ctx context.Context, in *GetCmReq, opts ...http.CallOption) (*GetCmReply, error) {
	var out GetCmReply
	pattern := "/api/comment/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.CmService/GetCm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmServiceHTTPClientImpl) ListCm(ctx context.Context, in *ListCmReq, opts ...http.CallOption) (*ListCmReply, error) {
	var out ListCmReply
	pattern := "/api/comment/list/{page}/{limit}/{productId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/v1.CmService/ListCm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CmServiceHTTPClientImpl) UpdateCm(ctx context.Context, in *UpdateCmReq, opts ...http.CallOption) (*UpdateCmReply, error) {
	var out UpdateCmReply
	pattern := "/api/comment/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/v1.CmService/UpdateCm"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
